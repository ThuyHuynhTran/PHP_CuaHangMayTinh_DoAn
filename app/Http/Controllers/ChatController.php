<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Message;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;

class ChatController extends Controller
{
    /**
     * G·ª≠i tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng.
     */
    public function send(Request $request)
    {
        try {
            // üß© ƒê·∫£m b·∫£o JSON body ƒë∆∞·ª£c decode ƒë√∫ng
            $data = $request->isJson()
                ? $request->json()->all()
                : $request->all();

            // ‚úÖ Validate d·ªØ li·ªáu
            $validator = Validator::make($data, [
                'name'    => 'required|string|max:255',
                'email'   => 'required|email',
                'phone'   => 'nullable|string|max:20',
                'message' => 'required|string|max:1000',
            ]);

            if ($validator->fails()) {
                Log::error('‚ùå L·ªói validate d·ªØ li·ªáu chat: ' . json_encode($validator->errors()));
                return response()->json([
                    'success' => false,
                    'error'   => 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
                    'details' => $validator->errors(),
                ], 422);
            }

            // ‚úÖ L∆∞u tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
            $msg = Message::create([
                'user_id' => Auth::id(),
                'name'    => $data['name'],
                'email'   => $data['email'],
                'phone'   => $data['phone'] ?? null,
                'message' => $data['message'],
                'status'  => 'chua_doc', // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
                'sender'  => 'user',     // Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
                'conversation' => [],    // Kh·ªüi t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
            ]);

            Log::info("üí¨ Tin nh·∫Øn m·ªõi ƒë∆∞·ª£c l∆∞u: {$msg->email} - {$msg->message}");

            return response()->json([
                'success' => true,
                'message' => 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!',
                'data' => $msg,
            ]);

        } catch (\Exception $e) {
            Log::error('üî• L·ªói khi l∆∞u tin nh·∫Øn: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'error'   => 'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.',
            ], 500);
        }
    }

    /**
     * Tr·∫£ l·ªùi tin nh·∫Øn t·ª´ admin.
     */
    public function reply(Request $request, $id)
    {
        try {
            $message = Message::findOrFail($id);

            // üß© Validate tin nh·∫Øn admin
            $validator = Validator::make($request->all(), [
                'message' => 'required|string|max:1000',
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'success' => false,
                    'error'   => 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
                    'details' => $validator->errors(),
                ], 422);
            }

            // L·∫•y cu·ªôc tr√≤ chuy·ªán c≈© v√† th√™m tin nh·∫Øn c·ªßa admin v√†o
            $conversation = $message->conversation ?? [];
            $conversation[] = [
                'sender' => 'admin',
                'content' => $request->message,
                'timestamp' => now(),
            ];

            // C·∫≠p nh·∫≠t tin nh·∫Øn v·ªõi cu·ªôc tr√≤ chuy·ªán m·ªõi
            $message->conversation = $conversation;
            $message->status = 'da_tra_loi'; // ƒê√°nh d·∫•u tin nh·∫Øn l√† ƒë√£ tr·∫£ l·ªùi
            $message->save();

            // Tr·∫£ v·ªÅ d·ªØ li·ªáu c·∫≠p nh·∫≠t cu·ªôc tr√≤ chuy·ªán, bao g·ªìm c·∫£ tin nh·∫Øn m·ªõi c·ªßa admin
            return response()->json([
                'success' => true,
                'message' => 'Tr·∫£ l·ªùi tin nh·∫Øn th√†nh c√¥ng',
                'data' => $message, // Tr·∫£ l·∫°i d·ªØ li·ªáu tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                'conversation_html' => view('admin.messages.conversation', ['message' => $message])->render(), // Tr·∫£ v·ªÅ HTML c·ªßa cu·ªôc tr√≤ chuy·ªán m·ªõi
            ]);
        } catch (\Exception $e) {
            Log::error('üî• L·ªói khi tr·∫£ l·ªùi tin nh·∫Øn: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'error'   => 'Kh√¥ng th·ªÉ tr·∫£ l·ªùi tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.',
            ], 500);
        }
    }
}
