<?php

namespace App\Http\Controllers;

use App\Models\Cart;
use App\Models\DienThoai;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class CartController extends Controller
{
    // üõí Th√™m s·∫£n ph·∫©m v√†o gi·ªè
    public function addToCart(Request $request, $productId)
    {
        // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
        if (!Auth::check()) {
            return redirect()->route('login')->with('error', 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng.');
        }

        $user = Auth::user();
        $product = DienThoai::findOrFail($productId);

        // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a
        $cartItem = Cart::where('user_id', $user->id)
                        ->where('product_id', $product->id)
                        ->first();

        if ($cartItem) {
            // N·∫øu ƒë√£ c√≥ ‚Üí tƒÉng s·ªë l∆∞·ª£ng v√† c·∫≠p nh·∫≠t th·ªùi gian
            $cartItem->quantity++;
            $cartItem->updated_at = now();
            $cartItem->save();
        } else {
            // N·∫øu ch∆∞a c√≥ ‚Üí th√™m m·ªõi (v√† s·∫Ω hi·ªán l√™n ƒë·∫ßu v√¨ created_at m·ªõi nh·∫•t)
            Cart::create([
                'user_id' => $user->id,
                'product_id' => $product->id,
                'quantity' => 1,
            ]);
        }

        return redirect()->back()->with('success', 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng!');
    }

    // üß∫ Hi·ªÉn th·ªã gi·ªè h√†ng
    public function viewCart()
    {
        // L·∫•y s·∫£n ph·∫©m c·ªßa user hi·ªán t·∫°i, s·∫Øp x·∫øp theo m·ªõi nh·∫•t
        $cartItems = Cart::with('product')
            ->where('user_id', Auth::id())
            ->orderBy('updated_at', 'desc') // M·ªõi c·∫≠p nh·∫≠t hi·ªán l√™n ƒë·∫ßu
            ->orderBy('created_at', 'desc') // N·∫øu c√πng th·ªùi gian, l·∫•y theo t·∫°o m·ªõi nh·∫•t
            ->get();

        // T√≠nh t·ªïng ti·ªÅn
        $total = $cartItems->sum(function ($item) {
            $gia = (float) preg_replace('/[^\d.]/', '', $item->product->gia);
            return $gia * $item->quantity;
        });

        return view('cart', compact('cartItems', 'total'));
    }
// Trong file: App/Http/Controllers/CartController.php

public function checkoutSelected(Request $request)
{
    $selectedProductIds = $request->input('selected_products', []);

    if (empty($selectedProductIds)) {
        return redirect()->route('cart.view')->with('error', 'Vui l√≤ng ch·ªçn s·∫£n ph·∫©m.');
    }

    $selectedItems = Cart::with('product')
                        ->whereIn('id', $selectedProductIds)
                        ->where('user_id', Auth::id())
                        ->get();
    
    $total = $selectedItems->sum(function($item) {
        $price = (float) preg_replace('/[^\d.]/', '', $item->product->gia);
        return $price * $item->quantity;
    });

    // ‚úÖ B∆Ø·ªöC 1: L·∫§Y DANH S√ÅCH ƒê·ªäA CH·ªà C·ª¶A USER T·ª™ DATABASE
    // Thay 'App\Models\Address' b·∫±ng ƒë∆∞·ªùng d·∫´n ƒë√∫ng ƒë·∫øn model Address c·ªßa b·∫°n n·∫øu c·∫ßn
    $addresses = \App\Models\Address::where('user_id', Auth::id())->get();

    // ‚úÖ B∆Ø·ªöC 2: TRUY·ªÄN BI·∫æN $addresses SANG VIEW
    return view('checkout', [
        'cartItems' => $selectedItems, // ƒê·ªïi 'selectedItems' th√†nh 'cartItems' cho kh·ªõp v·ªõi view c·ªßa b·∫°n
        'total' => $total,
        'addresses' => $addresses,      // D√≤ng quan tr·ªçng ƒë·ªÉ s·ª≠a l·ªói
    ]);
}
public function checkoutNow($id)
{
    // L·∫•y th√¥ng tin s·∫£n ph·∫©m
    $product = DienThoai::findOrFail($id);

    // T·∫°o "ƒë∆°n h√†ng t·∫°m" ch·ªâ ch·ª©a 1 s·∫£n ph·∫©m
    $cartItems = collect([
        (object)[
            'product' => $product,
            'quantity' => 1
        ]
    ]);

    // T√≠nh t·ªïng ti·ªÅn
    $total = (float) preg_replace('/[^\d.]/', '', $product->gia);

    // G·ªçi view checkout.blade.php
    return view('checkout', compact('cartItems', 'total'));
}

public function removeFromCart($id)
{
    $cartItem = Cart::where('id', $id)->where('user_id', Auth::id())->first();

    if (!$cartItem) {
        return redirect()->back()->with('error', 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m trong gi·ªè h√†ng.');
    }

    $cartItem->delete();

    return redirect()->back()->with('success', 'ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.');
}


}
