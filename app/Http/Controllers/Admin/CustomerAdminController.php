<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Order; // ‚úÖ Th√™m d√≤ng n√†y
use Illuminate\Support\Facades\Auth;

class CustomerAdminController extends Controller
{
    /**
     * üß© Hi·ªÉn th·ªã danh s√°ch kh√°ch h√†ng
     */
    public function index()
    {
        // ‚úÖ Ki·ªÉm tra quy·ªÅn admin tr·ª±c ti·∫øp (kh√¥ng c·∫ßn middleware)
        if (!Auth::check() || Auth::user()->role !== 'admin') {
            return redirect()->route('home')
                ->with('status', 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang qu·∫£n tr·ªã!');
        }

        // üìã L·∫•y danh s√°ch kh√°ch h√†ng (role = user)
        $customers = User::where('role', 'user')->paginate(15);

        return view('admin.customers.index', compact('customers'));
    }

    /**
     * üë§ Hi·ªÉn th·ªã chi ti·∫øt kh√°ch h√†ng v√† danh s√°ch ƒë∆°n h√†ng
     */
    public function show($id)
    {
        // üîç T√¨m kh√°ch h√†ng
        $user = User::findOrFail($id);

        // üì¶ L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng
        $orders = Order::where('user_id', $id)
                        ->latest()
                        ->paginate(10);

        return view('admin.customers.show', compact('user', 'orders'));
    }

    /**
     * üîí B·∫≠t / t·∫Øt kh√≥a t√†i kho·∫£n kh√°ch h√†ng
     */
    public function toggleLock($id)
    {
        // ‚úÖ Ki·ªÉm tra quy·ªÅn admin tr·ª±c ti·∫øp
        if (!Auth::check() || Auth::user()->role !== 'admin') {
            return redirect()->route('home')
                ->with('status', 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y!');
        }

        // üîç T√¨m ng∆∞·ªùi d√πng
        $user = User::findOrFail($id);

        // üß© ƒê·∫£o tr·∫°ng th√°i kh√≥a t√†i kho·∫£n
        $user->is_locked = !$user->is_locked;
        $user->login_attempts = 0; // reset s·ªë l·∫ßn sai khi m·ªü kh√≥a
        $user->save();

        // ‚úÖ G·ª≠i th√¥ng b√°o
        return redirect()->back()->with('success', 'C·∫≠p nh·∫≠t tr·∫°ng th√°i t√†i kho·∫£n th√†nh c√¥ng!');
    }
}
